name: Infrastructure Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'infra/**'
      - '.github/workflows/infra-pipeline.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'infra/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - test
          - qa
          - staging
          - production
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      auto_approve:
        description: 'Auto approve Terraform apply'
        required: false
        default: false
        type: boolean

env:
  TERRAFORM_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'

jobs:
  detect_changes:
    name: Detect Infrastructure Changes
    runs-on: ubuntu-latest
    outputs:
      infra_changed: ${{ steps.changes.outputs.infra }}
      modules_changed: ${{ steps.changes.outputs.modules }}
      env_changed: ${{ steps.changes.outputs.env }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Detect changes
      id: changes
      run: |
        if git diff --name-only HEAD~1 HEAD | grep -E '^infra/'; then
          echo "infra=true" >> $GITHUB_OUTPUT
        else
          echo "infra=false" >> $GITHUB_OUTPUT
        fi
        
        if git diff --name-only HEAD~1 HEAD | grep -E '^infra/modules/'; then
          echo "modules=true" >> $GITHUB_OUTPUT
        else
          echo "modules=false" >> $GITHUB_OUTPUT
        fi
        
        if git diff --name-only HEAD~1 HEAD | grep -E '^infra/envs/'; then
          echo "env=true" >> $GITHUB_OUTPUT
        else
          echo "env=false" >> $GITHUB_OUTPUT
        fi

  validate:
    name: Validate Terraform Configuration
    runs-on: ubuntu-latest
    needs: detect_changes
    if: needs.detect_changes.outputs.infra_changed == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Format Check
      run: |
        cd infra
        terraform fmt -check -recursive

    - name: Terraform Validation
      run: |
        cd infra
        # Validate each environment
        for env in test qa staging prod; do
          echo "Validating $env environment..."
          terraform init -backend=false
          terraform validate
        done

    - name: TFLint
      uses: terraform-linters/setup-tflint@v3
      with:
        tflint_version: latest

    - name: Run TFLint
      run: |
        cd infra
        tflint --init
        tflint --recursive

  security_scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    needs: [detect_changes, validate]
    if: needs.detect_changes.outputs.infra_changed == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: infra/
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

    - name: Run TFSec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: infra/
        format: sarif
        soft_fail: true

  plan_test:
    name: Plan Test Environment
    runs-on: ubuntu-latest
    needs: [detect_changes, validate, security_scan]
    if: (needs.detect_changes.outputs.infra_changed == 'true' || github.event_name == 'workflow_dispatch') && github.event_name != 'pull_request'
    environment: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      run: |
        cd infra
        terraform init -backend-config=envs/test/backend.tf

    - name: Terraform Plan
      run: |
        cd infra
        terraform plan -var-file=envs/test/test.tfvars -out=tfplan-test
        terraform show -no-color tfplan-test > plan-output-test.txt

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-test
        path: infra/tfplan-test

    - name: Comment Plan on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('infra/plan-output-test.txt', 'utf8');
          const output = `#### Terraform Plan for Test Environment 📖
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${plan}
          \`\`\`
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  plan_staging:
    name: Plan Staging Environment
    runs-on: ubuntu-latest
    needs: [detect_changes, validate, security_scan]
    if: (needs.detect_changes.outputs.infra_changed == 'true' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      run: |
        cd infra
        terraform init -backend-config=envs/staging/backend.tf

    - name: Terraform Plan
      run: |
        cd infra
        terraform plan -var-file=envs/staging/staging.tfvars -out=tfplan-staging

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-staging
        path: infra/tfplan-staging

  apply_staging:
    name: Apply Staging Infrastructure
    runs-on: ubuntu-latest
    needs: [plan_staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging' && inputs.action == 'apply')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Download Plan Artifact
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan-staging
        path: infra/

    - name: Terraform Init
      run: |
        cd infra
        terraform init -backend-config=envs/staging/backend.tf

    - name: Terraform Apply
      run: |
        cd infra
        if [ -f "tfplan-staging" ]; then
          terraform apply tfplan-staging
        else
          echo "No plan file found, running plan and apply..."
          terraform apply -var-file=envs/staging/staging.tfvars ${{ github.event_name == 'workflow_dispatch' && inputs.auto_approve && '-auto-approve' || '' }}
        fi

  plan_production:
    name: Plan Production Environment
    runs-on: ubuntu-latest
    needs: [apply_staging]
    if: github.ref == 'refs/heads/main' && needs.apply_staging.result == 'success'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      run: |
        cd infra
        terraform init -backend-config=envs/prod/backend.tf

    - name: Terraform Plan
      run: |
        cd infra
        terraform plan -var-file=envs/prod/prod.tfvars -out=tfplan-prod

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-production
        path: infra/tfplan-prod

  apply_production:
    name: Apply Production Infrastructure
    runs-on: ubuntu-latest
    needs: [plan_production]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production' && inputs.action == 'apply')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Download Plan Artifact
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan-production
        path: infra/

    - name: Terraform Init
      run: |
        cd infra
        terraform init -backend-config=envs/prod/backend.tf

    - name: Terraform Apply
      run: |
        cd infra
        if [ -f "tfplan-prod" ]; then
          terraform apply tfplan-prod
        else
          echo "No plan file found, running plan and apply..."
          terraform apply -var-file=envs/prod/prod.tfvars ${{ github.event_name == 'workflow_dispatch' && inputs.auto_approve && '-auto-approve' || '' }}
        fi

  destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.action == 'destroy'
    environment: ${{ inputs.environment }}-destroy
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      run: |
        cd infra
        terraform init -backend-config=envs/${{ inputs.environment }}/backend.tf

    - name: Terraform Destroy
      run: |
        cd infra
        terraform destroy -var-file=envs/${{ inputs.environment }}/${{ inputs.environment }}.tfvars ${{ inputs.auto_approve && '-auto-approve' || '' }}

  notification:
    name: Send Infrastructure Notifications
    runs-on: ubuntu-latest
    needs: [apply_staging, apply_production]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.apply_production.result == 'success' || needs.apply_staging.result == 'success' }}
      run: |
        echo "✅ Infrastructure deployment successful!"
        # Add your notification logic here (Slack, Teams, etc.)
        
    - name: Notify on failure
      if: ${{ needs.apply_production.result == 'failure' || needs.apply_staging.result == 'failure' }}
      run: |
        echo "❌ Infrastructure deployment failed!"
        # Add your notification logic here (Slack, Teams, etc.)
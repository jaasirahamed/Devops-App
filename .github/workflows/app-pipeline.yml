name: Application CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app/**'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.github/workflows/app-pipeline.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'app/**'
      - 'Dockerfile'
      - 'docker-compose.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: docker.io
  IMAGE_NAME: devops-app

jobs:
  detect_changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      app_changed: ${{ steps.changes.outputs.app }}
      docker_changed: ${{ steps.changes.outputs.docker }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Detect changes
      id: changes
      run: |
        if git diff --name-only HEAD~1 HEAD | grep -E '^(app/|Dockerfile|docker-compose\.yml)'; then
          echo "app=true" >> $GITHUB_OUTPUT
        else
          echo "app=false" >> $GITHUB_OUTPUT
        fi
        
        if git diff --name-only HEAD~1 HEAD | grep -E '^(Dockerfile|docker-compose\.yml)'; then
          echo "docker=true" >> $GITHUB_OUTPUT
        else
          echo "docker=false" >> $GITHUB_OUTPUT
        fi

  test:
    name: Run Application Tests
    runs-on: ubuntu-latest
    needs: detect_changes
    if: needs.detect_changes.outputs.app_changed == 'true' || github.event_name == 'workflow_dispatch' && !inputs.skip_tests
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt

    - name: Code formatting with Black
      run: |
        black --check app/
        
    - name: Linting with flake8
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Security scan with Safety
      run: |
        safety check

    - name: Run tests
      run: |
        python -m pytest app/tests/ -v --tb=short --cov=app --cov-report=xml
      env:
        FLASK_ENV: testing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [detect_changes, test]
    if: needs.detect_changes.outputs.app_changed == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [detect_changes, test, security_scan]
    if: (needs.detect_changes.outputs.app_changed == 'true' || github.event_name == 'workflow_dispatch') && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{date 'YYYY-MM-DD-HHmm'}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update ECS Service
      run: |
        # Update ECS service with new image
        aws ecs update-service \
          --cluster devops-app-staging-ecs-cluster \
          --service devops-app-staging-service \
          --force-new-deployment

    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster devops-app-staging-ecs-cluster \
          --services devops-app-staging-service

    - name: Run health checks
      run: |
        # Add health check logic here
        echo "Running health checks..."
        # Example: curl health endpoint

  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy_staging]
    if: (github.ref == 'refs/heads/main' && needs.deploy_staging.result == 'success') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update ECS Service
      run: |
        # Update ECS service with new image
        aws ecs update-service \
          --cluster devops-app-prod-ecs-cluster \
          --service devops-app-prod-service \
          --force-new-deployment

    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster devops-app-prod-ecs-cluster \
          --services devops-app-prod-service

    - name: Run health checks
      run: |
        # Add health check logic here
        echo "Running health checks..."
        # Example: curl health endpoint

